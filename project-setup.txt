# Voice AI Assistant - Project Setup

## Directory Structure

```
goodrobot/
├── README.md                     # Project overview and setup instructions
├── requirements.txt              # Python dependencies
├── config/                       # Configuration files
│   ├── settings.py               # Global settings
│   └── logging.py                # Logging configuration
├── src/                          # Source code
│   ├── voice_recognition/        # Voice recognition module
│   │   ├── __init__.py
│   │   ├── wake_word.py          # Wake word detection
│   │   └── speech_to_text.py     # STT processing
│   ├── notebook_llm/             # Knowledge repository
│   │   ├── __init__.py
│   │   ├── vector_db.py          # Vector database integration
│   │   └── knowledge_manager.py  # Knowledge management
│   ├── prioritization/           # Prioritization engine
│   │   ├── __init__.py
│   │   ├── task.py               # Task representation
│   │   ├── state.py              # State encoding
│   │   └── rl_model.py           # RL model implementation
│   ├── interface/                # User interface
│   │   ├── __init__.py
│   │   └── voice_interface.py    # Voice interaction logic
│   └── utils/                    # Utility functions
│       ├── __init__.py
│       └── metrics.py            # Performance metrics collection
└── tests/                        # Test cases
    ├── test_wake_word.py
    ├── test_speech_to_text.py
    ├── test_notebook_llm.py
    ├── test_prioritization.py
    └── test_integration.py
```

## Dependencies

Create a `requirements.txt` file with these initial dependencies:

```
# Core dependencies
numpy==1.25.2
pandas==2.1.0
pydantic==2.4.2
requests==2.31.0

# Voice processing
SpeechRecognition==3.10.0
pvporcupine==2.2.1  # Wake word detection
pyaudio==0.2.13     # Audio processing

# Knowledge repository
faiss-cpu==1.7.4    # Vector search
sentence-transformers==2.2.2  # Text embeddings
langchain==0.0.267  # LLM framework

# Machine learning
scikit-learn==1.3.0
torch==2.0.1

# Testing
pytest==7.4.0
pytest-cov==4.1.0
```

## Environment Setup

1. Create a virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

3. Set up pre-commit hooks for code quality:
   ```bash
   pip install pre-commit
   pre-commit install
   ```

4. Create a `.pre-commit-config.yaml` file:
   ```yaml
   repos:
   -   repo: https://github.com/pre-commit/pre-commit-hooks
       rev: v4.4.0
       hooks:
       -   id: trailing-whitespace
       -   id: end-of-file-fixer
       -   id: check-yaml
       -   id: check-added-large-files

   -   repo: https://github.com/psf/black
       rev: 23.7.0
       hooks:
       -   id: black

   -   repo: https://github.com/pycqa/isort
       rev: 5.12.0
       hooks:
       -   id: isort

   -   repo: https://github.com/pycqa/flake8
       rev: 6.1.0
       hooks:
       -   id: flake8
   ```

## Initial README.md

```markdown
# Voice AI Personal Assistant

An always-listening voice AI assistant that integrates with a personal knowledge repository to provide contextualized life management support.

## Vision

This system understands the user deeply through accumulated interactions and serves as a personal assistant, advisor, organizer, and life coach.

## Key Features

- Always-available voice interface
- Persistent memory via NotebookLLM integration
- Intelligent prioritization using reinforcement learning
- Context-aware recommendations
- Whole-life perspective

## Getting Started

1. Clone this repository
2. Install dependencies: `pip install -r requirements.txt`
3. Configure system settings in `config/settings.py`
4. Run initial tests: `pytest`
5. Start the assistant: `python src/main.py`

## Development

- Follow the implementation roadmap in project documentation
- Run tests before commits: `pytest`
- Use pre-commit hooks for code quality

## License

[Choose appropriate license]
```
